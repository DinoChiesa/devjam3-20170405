<ProxyEndpoint name='default'>
  <Description>the main proxy endpoint</Description>
  <HTTPProxyConnection>
    <BasePath>/oauth2-pg</BasePath>
    <Properties/>
    <VirtualHost>secure</VirtualHost>
  </HTTPProxyConnection>

  <FaultRules/>

  <PreFlow name='PreFlow'>
      <Request/>
      <Response/>
  </PreFlow>
  <PostFlow name='PostFlow'>
      <Request/>
      <Response>
        <Step><Name>AM-CleanResponseHeaders</Name></Step>
        <Step>
          <Name>JS-GroomTokenResponse</Name>
          <Condition>request.formparam.grant_type = "password" OR request.formparam.grant_type = "refresh_token"</Condition>
        </Step>
      </Response>
  </PostFlow>

  <Flows>
    <Flow name='OAuth2.0 token dispenser'>
      <Description>dispense tokens for OAuth2.0, for password and refresh_token grant types</Description>
      <!--
          An example request is like this:

          curl -i -X POST -H 'content-type: application/x-www-form-urlencoded' \
            -u ${client_id}:${client_secret} \
            'https://ORG-ENV.apigee.net/devjam3/oauth2-pg/token'\
            -d 'grant_type=password&username=XXX&password=XXXX'

          The resulting token will have an expiry, and a set of roles,
          as returned by the user authentication service.

          Or, to refresh a token, the request is like this:

          curl -i -X POST -H 'content-type: application/x-www-form-urlencoded' \
            -u ${client_id}:${client_secret} \
            'https://ORG-ENV.apigee.net/devjam3/oauth2-pg/token'\
            -d 'grant_type=refresh_token&refresh_token=xxxx'

      -->
      <Request>

        <!-- basic validation of the inbound request. Is it well formed? -->
        <Step>
          <Name>RF-InvalidGrantType</Name>
          <Condition>(request.formparam.grant_type != "password") AND (request.formparam.grant_type != "refresh_token") </Condition>
        </Step>
        <Step>
          <Name>RF-InvalidAuthentication</Name>
          <Condition>(request.formparam.grant_type = "password") AND ((request.formparam.username = null) OR (request.formparam.password = null))</Condition>
        </Step>
        <Step>
          <Name>RF-InvalidRequest</Name>
          <Condition>(request.formparam.grant_type = "refresh_token") AND (request.formparam.refresh_token = null)</Condition>
        </Step>

        <!-- password grant -->
        <Step>
          <Name>SC-ValidateUser</Name>
          <Condition>request.formparam.grant_type = "password"</Condition>
        </Step>
        <Step>
          <Name>RF-UserAuthenticationFailed</Name>
          <Condition>(request.formparam.grant_type = "password") AND ((userAuthResponse is null) or NOT (userAuthResponse.status.code = 200))</Condition>
        </Step>
        <Step>
          <Name>JS-RipUserAuthResponse</Name>
          <Condition>request.formparam.grant_type = "password"</Condition>
        </Step>
        <Step>
          <!-- this policy generates a payload -->
          <Name>OAuthV2-GenerateAccessToken-PG</Name>
          <Condition>request.formparam.grant_type = "password"</Condition>
        </Step>

        <!-- refresh_token grant -->
        <Step>
          <!-- this policy generates a payload -->
          <Name>OAuthV2-RefreshAccessToken</Name>
          <Condition>request.formparam.grant_type = "refresh_token"</Condition>
        </Step>

      </Request>

      <Response/>

      <Condition>(proxy.pathsuffix MatchesPath "/token") and (request.verb = "POST")</Condition>
    </Flow>

    <Flow name='unknown request'>
      <Request>
        <Step><Name>RF-UnknownRequest</Name></Step>
      </Request>
      <Response/>
    </Flow>

  </Flows>

  <!-- There is no backend target. Responses for oauth token generation and
       refresh are direct from this API proxy.
  -->
  <RouteRule name='NoRouteRule'/>

</ProxyEndpoint>
